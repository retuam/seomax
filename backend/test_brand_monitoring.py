#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Brand Monitoring —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
"""

import asyncio
import requests
import json
import time
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:5000"
TEST_EMAIL = f"brand_test_{int(time.time())}@example.com"
TEST_PASSWORD = "testpassword123"

class BrandMonitoringTester:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.headers = {}
        
    def register_and_login(self) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            register_data = {
                "email": TEST_EMAIL,
                "password": TEST_PASSWORD
            }
            
            response = self.session.post(f"{BASE_URL}/api/auth/register", json=register_data)
            if response.status_code not in [200, 201]:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
                return False
            
            # –õ–æ–≥–∏–Ω
            login_data = {
                "email": TEST_EMAIL,
                "password": TEST_PASSWORD
            }
            
            response = self.session.post(f"{BASE_URL}/api/auth/login", json=login_data)
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
            
            token_data = response.json()
            self.token = token_data["access_token"]
            self.headers = {"Authorization": f"Bearer {self.token}"}
            
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def test_create_brand_project(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è brand –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_data = {
                "name": "Test Brand Project",
                "brand_name": "TechCorp",
                "brand_description": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è IT –∫–æ–º–ø–∞–Ω–∏—è, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ CRM —Å–∏—Å—Ç–µ–º–∞—Ö, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö.",
                "keywords_count": 20,
                "competitors": [
                    "Microsoft",
                    "Salesforce", 
                    "Oracle",
                    "SAP",
                    "HubSpot"
                ]
            }
            
            response = self.session.post(
                f"{BASE_URL}/api/brand-projects",
                json=project_data,
                headers=self.headers
            )
            
            if response.status_code in [200, 201]:
                project = response.json()
                print(f"‚úÖ Brand –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project['name']} (ID: {project['uuid']})")
                print(f"   - –ë—Ä–µ–Ω–¥: {project['brand_name']}")
                print(f"   - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {len(project['competitors'])}")
                return project
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return {}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è brand –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return {}
    
    def test_get_brand_projects(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ brand –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            response = self.session.get(
                f"{BASE_URL}/api/brand-projects",
                headers=self.headers
            )
            
            if response.status_code == 200:
                projects = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
                for project in projects:
                    print(f"   - {project['name']}: {project['brand_name']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            return False
    
    def test_get_brand_project(self, project_id: str) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ brand –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            response = self.session.get(
                f"{BASE_URL}/api/brand-projects/{project_id}",
                headers=self.headers
            )
            
            if response.status_code == 200:
                project = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–µ–∫—Ç: {project['name']}")
                print(f"   - –ë—Ä–µ–Ω–¥: {project['brand_name']}")
                print(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {project['brand_description'][:50]}...")
                print(f"   - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {len(project['competitors'])}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return False
    
    def test_brand_analytics(self, project_id: str) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ brand –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            response = self.session.get(
                f"{BASE_URL}/api/brand-projects/{project_id}/analytics",
                headers=self.headers
            )
            
            if response.status_code == 200:
                analytics = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
                print(f"   - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {analytics['total_queries']}")
                print(f"   - –£–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—Ä–µ–Ω–¥–∞: {analytics['brand_mentions']}")
                print(f"   - –£–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {analytics['competitor_mentions']}")
                print(f"   - –í–∏–¥–∏–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞: {analytics['brand_visibility_percentage']:.1f}%")
                print(f"   - –í–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {analytics['competitor_visibility_percentage']:.1f}%")
                
                if analytics['top_competitors']:
                    print("   - –¢–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:")
                    for comp in analytics['top_competitors'][:3]:
                        print(f"     ‚Ä¢ {comp['name']}: {comp['mentions']} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return False
    
    def test_delete_brand_project(self, project_id: str) -> bool:
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è brand –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            response = self.session.delete(
                f"{BASE_URL}/api/brand-projects/{project_id}",
                headers=self.headers
            )
            
            if response.status_code == 200:
                print("‚úÖ Brand –ø—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return False
    
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ Brand Monitoring"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BRAND MONITORING –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê")
        print("=" * 60)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.register_and_login():
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project = self.test_create_brand_project()
        if not project:
            return
        
        project_id = project['uuid']
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        self.test_get_brand_projects()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        self.test_get_brand_project(project_id)
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞)
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (30 —Å–µ–∫—É–Ω–¥)...")
        time.sleep(30)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.test_brand_analytics(project_id)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        self.test_delete_brand_project(project_id)
        
        print("\n" + "=" * 60)
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BrandMonitoringTester()
    tester.run_full_test()

if __name__ == "__main__":
    main()
