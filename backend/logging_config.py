"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Loguru
"""
import sys
from pathlib import Path
from loguru import logger
from config import settings

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.remove()
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ SQLAlchemy
    import logging
    logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)
    logging.getLogger('sqlalchemy.pool').setLevel(logging.WARNING)
    logging.getLogger('sqlalchemy.dialects').setLevel(logging.WARNING)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = (
        "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
        "<level>{level: <8}</level> | "
        "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | "
        "<level>{message}</level>"
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    logger.add(
        sys.stdout,
        format=log_format,
        level=settings.log_level,
        colorize=True,
        backtrace=True,
        diagnose=True,
        filter=lambda record: not record["name"].startswith("sqlalchemy")
    )
    
    # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥
    log_file = Path(settings.log_file)
    log_file.parent.mkdir(parents=True, exist_ok=True)
    
    logger.add(
        log_file,
        format=log_format,
        level=settings.log_level,
        rotation="10 MB",  # –†–æ—Ç–∞—Ü–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 10MB
        retention="30 days",  # –•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ 30 –¥–Ω–µ–π
        compression="zip",  # –°–∂–∏–º–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        backtrace=True,
        diagnose=True,
        enqueue=True,  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
        filter=lambda record: not record["name"].startswith("sqlalchemy")
    )
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
    error_log_file = log_file.parent / "errors.log"
    logger.add(
        error_log_file,
        format=log_format,
        level="ERROR",
        rotation="5 MB",
        retention="60 days",
        compression="zip",
        backtrace=True,
        diagnose=True,
        enqueue=True
    )
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
    worker_log_file = log_file.parent / "worker.log"
    logger.add(
        worker_log_file,
        format=log_format,
        level="INFO",
        rotation="5 MB",
        retention="14 days",
        compression="zip",
        filter=lambda record: "worker" in record["name"].lower(),
        enqueue=True
    )
    
    logger.info("üöÄ Logging system initialized")
    logger.info(f"üìÅ Log files: {log_file.parent}")
    logger.info(f"üìä Log level: {settings.log_level}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sentry –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
def setup_sentry():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sentry –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫"""
    if settings.sentry_dsn and settings.is_production:
        import sentry_sdk
        from sentry_sdk.integrations.fastapi import FastApiIntegration
        from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration
        from sentry_sdk.integrations.loguru import LoguruIntegration
        
        sentry_sdk.init(
            dsn=settings.sentry_dsn,
            integrations=[
                FastApiIntegration(auto_enabling_integrations=False),
                SqlalchemyIntegration(),
                LoguruIntegration(),
            ],
            traces_sample_rate=0.1,  # 10% —Ç—Ä–µ–π—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            environment=settings.environment,
            release="seo-analyzer@1.0.0",
        )
        
        logger.info("üìä Sentry monitoring initialized")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
def log_execution(func_name: str = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    def decorator(func):
        import functools
        import time
        
        @functools.wraps(func)
        async def async_wrapper(*args, **kwargs):
            name = func_name or f"{func.__module__}.{func.__name__}"
            start_time = time.time()
            
            try:
                logger.debug(f"‚è≥ Starting {name}")
                result = await func(*args, **kwargs)
                execution_time = time.time() - start_time
                logger.debug(f"‚úÖ Completed {name} in {execution_time:.2f}s")
                return result
            except Exception as e:
                execution_time = time.time() - start_time
                logger.error(f"‚ùå Failed {name} after {execution_time:.2f}s: {e}")
                raise
        
        @functools.wraps(func)
        def sync_wrapper(*args, **kwargs):
            name = func_name or f"{func.__module__}.{func.__name__}"
            start_time = time.time()
            
            try:
                logger.debug(f"‚è≥ Starting {name}")
                result = func(*args, **kwargs)
                execution_time = time.time() - start_time
                logger.debug(f"‚úÖ Completed {name} in {execution_time:.2f}s")
                return result
            except Exception as e:
                execution_time = time.time() - start_time
                logger.error(f"‚ùå Failed {name} after {execution_time:.2f}s: {e}")
                raise
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π wrapper –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        import asyncio
        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        else:
            return sync_wrapper
    
    return decorator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
setup_logging()
setup_sentry()
