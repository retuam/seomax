"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from database import engine, Base, get_async_session
from models import User, WordGroup, Word, LLM, WordSerp, Company
from auth import hash_password

async def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    async with engine.begin() as conn:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
        # await conn.run_sync(Base.metadata.drop_all)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        await conn.run_sync(Base.metadata.create_all)
    
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

async def create_initial_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    async with get_async_session() as db:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                email="admin@example.com",
                password=hash_password("admin123")
            )
            db.add(test_user)
            
            # –°–æ–∑–¥–∞–µ–º LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            llm_providers = [
                LLM(name="openai", api_url="https://api.openai.com/v1/chat/completions"),
                LLM(name="grok", api_url="https://api.grok.com/v1/chat/completions"),
                LLM(name="gemini", api_url="https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent")
            ]
            
            for llm in llm_providers:
                db.add(llm)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã —Å–ª–æ–≤
            groups = [
                WordGroup(name="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"),
                WordGroup(name="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"),
                WordGroup(name="E-commerce")
            ]
            
            for group in groups:
                db.add(group)
            
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è —Å–≤—è–∑–µ–π
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞
            test_words = [
                Word(name="–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", group_id=groups[0].uuid),
                Word(name="–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", group_id=groups[0].uuid),
                Word(name="–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", group_id=groups[0].uuid),
                Word(name="SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", group_id=groups[1].uuid),
                Word(name="–∫–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥", group_id=groups[1].uuid),
                Word(name="–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω", group_id=groups[2].uuid),
                Word(name="–æ–Ω–ª–∞–π–Ω –ø—Ä–æ–¥–∞–∂–∏", group_id=groups[2].uuid)
            ]
            
            for word in test_words:
                db.add(word)
            
            await db.commit()
            print("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print("üìß –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin@example.com / admin123")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            await db.rollback()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        await create_tables()
        await create_initial_data()
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main())
