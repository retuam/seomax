#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
"""
import asyncio
import asyncpg
import psycopg2
from dotenv import load_dotenv
import os
import urllib.parse
import ssl
from typing import Optional

def create_ssl_context(insecure: bool = False) -> ssl.SSLContext:
    """–°–æ–∑–¥–∞–µ—Ç SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç certifi, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω).
    –ü—Ä–∏ insecure=True –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤, –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞).
    """
    cafile: Optional[str] = None
    try:
        import certifi  # type: ignore
        cafile = certifi.where()
    except Exception:
        cafile = None
    ctx = ssl.create_default_context(cafile=cafile) if cafile else ssl.create_default_context()
    if insecure:
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
    return ctx

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ + SSL)
PROJECT_REF = "usshslzenyrubetvwenc"
DB_PASSWORD = "d93b4zd0ivn8a4G8"

SUPABASE_CONFIGS = [
    {
        "name": "Transaction Pooler (working)",
        # –í–ê–ñ–ù–û: –¥–ª—è pooler –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å project ref: postgres.<ref>
        "url": f"postgresql://postgres.{PROJECT_REF}:{DB_PASSWORD}@aws-0-eu-central-1.pooler.supabase.com:5432/postgres?sslmode=require"
    }
]

def test_sync_connection():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å psycopg2"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (psycopg2)...")
    
    for config in SUPABASE_CONFIGS:
        print(f"\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º {config['name']}...")
        try:
            conn = psycopg2.connect(config['url'])
            cursor = conn.cursor()
            cursor.execute("SELECT NOW(), version();")
            result = cursor.fetchone()
            print(f"‚úÖ {config['name']} - –£–°–ü–ï–®–ù–û!")
            print(f"   –í—Ä–µ–º—è: {result[0]}")
            print(f"   –í–µ—Ä—Å–∏—è: {result[1][:50]}...")
            cursor.close()
            conn.close()
            return config['url']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á–∏–π URL
        except Exception as e:
            print(f"‚ùå {config['name']} - –û–®–ò–ë–ö–ê: {e}")
            if "getaddrinfo failed" in str(e) or "could not translate host name" in str(e):
                print("   ‚Ü™Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ DNS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–æ–º–µ–Ω–∞–º supabase.co/ *.pooler.supabase.com, VPN/Firewall")
    
    return None

async def test_async_connection():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å asyncpg"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (asyncpg)...")
    
    for config in SUPABASE_CONFIGS:
        print(f"\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º {config['name']}...")
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –¥–ª—è SQLAlchemy (async)
            async_url = config['url'].replace('postgresql://', 'postgresql+asyncpg://')
            
            # –ü–∞—Ä—Å–∏–º URL –¥–ª—è asyncpg.connect
            import urllib.parse
            parsed = urllib.parse.urlparse(config['url'])
            
            try:
                conn = await asyncpg.connect(
                    host=parsed.hostname,
                    port=parsed.port,
                    database=parsed.path[1:],  # —É–±–∏—Ä–∞–µ–º '/' –≤ –Ω–∞—á–∞–ª–µ
                    user=parsed.username,
                    password=parsed.password,
                    ssl=create_ssl_context(insecure=False)  # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TLS
                )
            except Exception as ssl_err:
                if "CERTIFICATE_VERIFY_FAILED" in str(ssl_err):
                    print("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)...")
                    conn = await asyncpg.connect(
                        host=parsed.hostname,
                        port=parsed.port,
                        database=parsed.path[1:],
                        user=parsed.username,
                        password=parsed.password,
                        ssl=create_ssl_context(insecure=True)  # –§–æ–ª–±—ç–∫ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    )
                else:
                    raise
            
            result = await conn.fetchrow("SELECT NOW(), version();")
            print(f"‚úÖ {config['name']} - –£–°–ü–ï–®–ù–û!")
            print(f"   –í—Ä–µ–º—è: {result[0]}")
            print(f"   –í–µ—Ä—Å–∏—è: {result[1][:50]}...")
            await conn.close()
            return async_url  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á–∏–π URL –¥–ª—è SQLAlchemy
        except Exception as e:
            print(f"‚ùå {config['name']} - –û–®–ò–ë–ö–ê: {e}")
            if "getaddrinfo failed" in str(e) or "could not translate host name" in str(e):
                print("   ‚Ü™Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ DNS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–æ–º–µ–Ω–∞–º supabase.co/ *.pooler.supabase.com, VPN/Firewall")
    
    return None

async def test_tables(working_url: str):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π URL (–≤–∫–ª—é—á–∞—è pooler)
        parsed = urllib.parse.urlparse(working_url)
        
        try:
            conn = await asyncpg.connect(
                host=parsed.hostname,
                port=parsed.port,
                database=parsed.path[1:],
                user=parsed.username,
                password=parsed.password,
                ssl=create_ssl_context(insecure=False)
            )
        except Exception as ssl_err:
            if "CERTIFICATE_VERIFY_FAILED" in str(ssl_err):
                print("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)...")
                conn = await asyncpg.connect(
                    host=parsed.hostname,
                    port=parsed.port,
                    database=parsed.path[1:],
                    user=parsed.username,
                    password=parsed.password,
                    ssl=create_ssl_context(insecure=True)
                )
            else:
                raise
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name;
        """)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"   - {table['table_name']}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS test_connection (
                id SERIAL PRIMARY KEY,
                message TEXT,
                created_at TIMESTAMP DEFAULT NOW()
            );
        """)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await conn.execute("""
            INSERT INTO test_connection (message) 
            VALUES ('SEO Analyzer test connection successful!');
        """)
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        result = await conn.fetchrow("SELECT * FROM test_connection ORDER BY id DESC LIMIT 1;")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {result['message']} –≤ {result['created_at']}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        await conn.execute("DROP TABLE IF EXISTS test_connection;")
        print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏: {e}")
        return False

def update_env_file(working_url):
    """–û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª —Å —Ä–∞–±–æ—á–∏–º URL"""
    if not working_url:
        return
        
    print(f"\nüìù –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª —Å —Ä–∞–±–æ—á–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env
    with open('.env', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º DATABASE_URL
    async_url = working_url.replace('postgresql://', 'postgresql+asyncpg://')
    
    with open('.env', 'w', encoding='utf-8') as f:
        for line in lines:
            if line.startswith('DATABASE_URL='):
                f.write(f'DATABASE_URL={async_url}\n')
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω DATABASE_URL: {async_url}")
            else:
                f.write(line)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    working_url = test_sync_connection()
    
    if working_url:
        # –¢–µ—Å—Ç 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async_url = await test_async_connection()
        
        if async_url:
            # –¢–µ—Å—Ç 3: –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
            tables_ok = await test_tables(working_url)
            
            if tables_ok:
                # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
                update_env_file(working_url)
                
                print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
                print("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print("‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä")
                return True
    
    print("\nüí• –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
    print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Supabase")
    print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("   1. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    print("   2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("   3. –°—Ç–∞—Ç—É—Å Supabase –ø—Ä–æ–µ–∫—Ç–∞")
    return False

if __name__ == "__main__":
    import urllib.parse
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    try:
        import psycopg2
        print("‚úÖ psycopg2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install psycopg2-binary")
        exit(1)
    
    try:
        import asyncpg
        print("‚úÖ asyncpg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install asyncpg")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = asyncio.run(main())
    
    if success:
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä:")
        print("   python main.py")
    else:
        print("\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞:")
        print("   python test_supabase.py")
