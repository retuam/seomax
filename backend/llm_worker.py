import asyncio
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from models import Word, LLM, WordSerp, Company, BrandProject, BrandMention, Competitor
from database import get_async_session
from llm_service import llm_service
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class LLMWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SERP –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.llm_providers = {
            "openai": llm_service.get_serp_from_openai,
            "grok": llm_service.get_serp_from_grok,
            "gemini": llm_service.get_serp_from_gemini
        }
    
    async def process_word_with_llm(self, word: Word, llm: LLM, db: AsyncSession) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —Å –æ–¥–Ω–∏–º LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏
            two_weeks_ago = datetime.utcnow() - timedelta(days=14)
            
            existing_serp = await db.scalar(
                select(WordSerp).where(
                    WordSerp.word_id == word.uuid,
                    WordSerp.llm_id == llm.uuid,
                    WordSerp.create_time > two_weeks_ago
                )
            )
            
            if existing_serp:
                logger.info(f"SERP –¥–ª—è —Å–ª–æ–≤–∞ '{word.name}' –∏ LLM '{llm.name}' —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º SERP –¥–∞–Ω–Ω—ã–µ –æ—Ç LLM
            llm_function = self.llm_providers.get(llm.name.lower())
            if not llm_function:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {llm.name}")
                return False
            
            logger.info(f"–ü–æ–ª—É—á–∞–µ–º SERP –¥–ª—è '{word.name}' –æ—Ç {llm.name}")
            serp_content = await llm_function(word.name)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç SERP
            word_serp = WordSerp(
                content=serp_content,
                llm_id=llm.uuid,
                word_id=word.uuid,
                create_time=datetime.utcnow()
            )
            
            db.add(word_serp)
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ SERP
            companies = await llm_service.extract_companies_from_serp_simple(serp_content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
            for company_name in companies:
                company = Company(
                    name=company_name,
                    serp_id=word_serp.uuid
                )
                db.add(company)
            
            await db.commit()
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ SERP –¥–ª—è —Å–ª–æ–≤–∞ '{word.name}'")
            
            return True
            
        except Exception as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–≤–∞ '{word.name}' —Å LLM '{llm.name}': {e}")
            return False

    async def analyze_brand_mentions_for_serp(self, serp: WordSerp, db: AsyncSession) -> bool:
        """–ê–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—Ä–µ–Ω–¥–æ–≤ –≤ SERP —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ brand –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É —Å–ª–æ–≤
            word = await db.scalar(select(Word).where(Word.uuid == serp.word_id))
            if not word or not word.group_id:
                return False
            
            # –ò—â–µ–º brand –ø—Ä–æ–µ–∫—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            brand_project = await db.scalar(
                select(BrandProject).where(BrandProject.word_group_id == word.group_id)
            )
            
            if not brand_project:
                return False  # –≠—Ç–æ –Ω–µ brand –ø—Ä–æ–µ–∫—Ç
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            competitors = await db.execute(
                select(Competitor).where(Competitor.project_id == brand_project.uuid)
            )
            competitor_names = [comp.name for comp in competitors.scalars().all()]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ LLM
            analysis_result = await llm_service.analyze_brand_mentions(
                serp.content,
                brand_project.brand_name,
                competitor_names
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            brand_mention = BrandMention(
                serp_id=serp.uuid,
                project_id=brand_project.uuid,
                brand_mentioned=1 if analysis_result.get("brand_mentioned", False) else 0,
                competitor_mentioned=1 if analysis_result.get("competitor_mentioned", False) else 0,
                mentioned_competitor=analysis_result.get("mentioned_competitor"),
                brand_position=analysis_result.get("brand_position"),
                competitor_position=analysis_result.get("competitor_position"),
                analysis_confidence=analysis_result.get("confidence", 100)
            )
            
            db.add(brand_mention)
            await db.commit()
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è SERP {serp.uuid}: brand={analysis_result.get('brand_mentioned')}, competitor={analysis_result.get('competitor_mentioned')}")
            return True
            
        except Exception as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è SERP {serp.uuid}: {e}")
            return False

    async def run_worker_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SERP –¥–∞–Ω–Ω—ã—Ö")
        
        async with get_async_session() as db:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
                words_result = await db.execute(
                    select(Word).where(Word.status == 1)
                )
                words = list(words_result.scalars().all())
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
                llms_result = await db.execute(
                    select(LLM).where(LLM.is_active == 1)
                )
                llms = list(llms_result.scalars().all())
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –∏ {len(llms)} LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
                
                processed_count = 0
                for word in words:
                    for llm in llms:
                        success = await self.process_word_with_llm(word, llm, db)
                        if success:
                            processed_count += 1
                            
                            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ SERP, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π SERP –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –∏ LLM
                            latest_serp = await db.scalar(
                                select(WordSerp)
                                .where(WordSerp.word_id == word.uuid)
                                .where(WordSerp.llm_id == llm.uuid)
                                .order_by(WordSerp.create_time.desc())
                                .limit(1)
                            )
                            
                            if latest_serp:
                                await self.analyze_brand_mentions_for_serp(latest_serp, db)
                
                logger.info(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–ª–æ–≤–æ-LLM")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –≤–æ—Ä–∫–µ—Ä–∞: {e}")

    async def run_continuous(self, interval_hours: int = 24 * 14):  # 2 –Ω–µ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval_hours} —á–∞—Å–æ–≤")
        
        while True:
            try:
                await self.run_worker_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                wait_seconds = interval_hours * 3600
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {interval_hours} —á–∞—Å–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
                await asyncio.sleep(wait_seconds)
                
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞")
                break
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {str(e)}")
                # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(3600)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–æ—Ä–∫–µ—Ä–∞
llm_worker = LLMWorker()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
async def start_worker():
    """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞"""
    await llm_worker.run_continuous()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é
    asyncio.run(start_worker())
